- anatomy of variable declaration:
01 my-variable pic 9(5) usage comp-5 value 12345.
01: level number
my-variable: data name
pic 9(5): picture clause
usage comp-5: usage clause
value 12345: value clause
.: termination of variable declaration

- Variables are defined in sections , declared using "section" keyword
- "working-storage" variables are similar to instance variables.

COBOL name conventions:
1/ chars between 1-30
2/ A-Z a-z 0-9 (-)
3/ include 1 alphabetic
4/ Not start with -
5/ not use reserved keywords

-picture clause(size/type)
01 my-alphabetic pic A(5)
01 my-alphanumeric pic X(5)
01 my-numeric pic 9(5)

01 my-numeric picture 9(5)
01 my-numeric pic 9(5)
01 my-numeric pic 99999

Assume I store bigger number for pic 9(5) that is 6 digits or more, the first element will be truncated, however when it is alphanumeric, it is the last elements that will be truncated(need more testing)
when I store a value that is less that the anticipated storage, say 8 for pic 9(5) will be stored as 00008

V represent a decimal point internally
an edited variable is required to represent a decimal point externally

Variable Levels:
Variable levels represent the hierarchy of the data(example 01 05 10...)
Variables hold all variables beneath them with higher numbers until the next variable with a lowe/equal number.
Group level variables do not define picture clauses, they are used to group together elementary level variables.
Using a numbering scheme that skips numbers is recommended, with multiples of five being common convention.

Using Micro Focus, we can omit ws-name and instead use #name since `#` works as an escape character.
A variable with the level number `78` defines constantsj, a picture clause doesn't have to be defined.
We can create a custom type instead of reusing the same variable names in different levels
The `declare` statement allows you to declare variables in the procedure division.
The use of the double colon notation to qualify variables within groups:
instead of: `move 12.0 to min of ws-length`
we can use move 12.0 to my-bird::#length::min

We can use of or double colon notation to refer to elementary-level variables which have the same data name.

Summary:
Variable definitions are made of the level number, the data name, and a picture, usage, and value clause.
General purpose variables are declared in the working-storage section.
The `picture` clause is used to declare the size and type of a variable.
> Edited variables define how the data is displayed.
level numbers are used group together related variables into a hierarchy.
> data grouped this way will be stored sequentially in memory.
Micro Focus COBOL allow us to:
>Declare constatnt with level 78 variables
>Declare custom types
>Declare local variables
>use inline comments
>use the double-colon notation to qualify elementary-level variables in groups.
>use a hash# as an escape character for reserved words.
